DROP SCHEMA IF EXISTS postgres CASCADE;
CREATE SCHEMA postgres;
CREATE SEQUENCE hibernate_sequence START WITH 1 INCREMENT BY 1;

-- Table: diagnosis
CREATE TABLE diagnosis (
    id              INT             NOT NULL PRIMARY KEY,
    name            VARCHAR(100)    NOT NULL
);

-- Table: treatment
CREATE TABLE treatment (
    id              INT             NOT NULL PRIMARY KEY,
    name            INT             NOT NULL,
    type            VARCHAR(30) CHECK ( type IN ('medical procedure', 'medicine')) NOT NULL,
    dosageForm      VARCHAR(30) CHECK ( dosageForm IN ('tablet', 'syrup', 'rectal suppository', 'vaginal suppository', 'injection')) NOT NULL

);

-- Table: patients
CREATE TABLE patients (
    id              INT             NOT NULL PRIMARY KEY,
    firstName       VARCHAR(30)     NOT NULL,
    lastName        VARCHAR(30)     NOT NULL,
    diagnosis       VARCHAR(100)    NOT NULL,
    healthInsurance INTEGER         NOT NULL,
    status          VARCHAR(30)     NOT NULL,
    doctor_id       INT             NOT NULL,
    FOREIGN KEY (doctor_id) REFERENCES users (id),
    diagnosis_id    INT             NOT NULL,
    FOREIGN KEY (diagnosis_id) REFERENCES diagnosis (id)
);

-- Table: appointments
CREATE TABLE appointments (
    id              INT             NOT NULL PRIMARY KEY,
    startdate       TIMESTAMP       NOT NULL,
    enddate         TIMESTAMP       NOT NULL,
    dayoftheweek    VARCHAR(30)     NOT NULL,
    timeoftheday    VARCHAR(30)     NOT NULL,
    dosage          FLOAT           NOT NULL,
    patient_id      INT             NOT NULL,
    FOREIGN KEY (patient_id) REFERENCES patients (id),
    treatment_id    INT             NOT NULL,
    FOREIGN KEY (treatment_id) REFERENCES treatment (id)
);

-- Table: events
CREATE TABLE events (
    id              INT             NOT NULL,
    date            TIMESTAMP       NOT NULL,
    period          VARCHAR(30)     NOT NULL,
    status          VARCHAR(30)     NOT NULL,
    comment         VARCHAR(255),
    patient_id      INT             ,
    FOREIGN KEY (patient_id) REFERENCES patients (id),
    treatment_id    INT             ,
    FOREIGN KEY (treatment_id) REFERENCES treatment (id)
);

-- Table for mapping patients and diagnoses: patients_diagnoses
CREATE TABLE patients_diagnoses
(
    patient_id      INT             NOT NULL,
    diagnosis_id    INT             NOT NULL,
    FOREIGN KEY (patient_id) REFERENCES patients (id),
    FOREIGN KEY (diagnosis_id) REFERENCES diagnosis (id)
);

-- Table: users
CREATE TABLE users (
    id              INT             NOT NULL PRIMARY KEY,
    firstName       VARCHAR(50)     NOT NULL,
    lastName        VARCHAR(50)     NOT NULL,
    role            VARCHAR(30)     CHECK ( role IN ('ROLE_ADMIN', 'ROLE_DOCTOR', 'ROLE_NURSE')) NOT NULL,
    email           VARCHAR(255)    NOT NULL,
    password        VARCHAR(255)    NOT NULL
);



-- Insert data

INSERT INTO  events VALUES (1, '2000-03-03', '11 clock', 'PLANNED', null, NULL,NULL);


